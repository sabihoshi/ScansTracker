{//; Usage: <variable> <name> <value> [inline] }
{function;pushEmbed;
    {push;{params;0};fields.name:{params;1}}
    {push;{params;0};fields.value:{params;2}}
    {if;{paramslength};>;3;
        {push;{params;0};fields.inline:{params;3}};
        {push;{params;0};fields.inline:true}
    }
}

{//; Usage: <variable> <[items,...]> <escaped code> }
{function;map;
    {set;~ret.map;[]}
    {foreach;{params;0};{params;1};
        {push;~ret.map;{inject;{params;2}}}
    }
    {get;~ret.map}
}

{//; Usage: <{object}> }
{function;objectToArray;
    {set;~result;{params}}
    {set;~result;{apply;regexreplace;{get;~result};/^\{lb}/;[}}
    {set;~result;{apply;regexreplace;{get;~result};/\{rb}$/;]}}
    {get;~result}
}

{//; Usage: <[array]> }
{function;arrayToObject;
    {set;~result;{params}}
    {set;~result;{regexreplace;{get;~result};/^\[/;{lb}}}
    {set;~result;{regexreplace;{get;~result};/\]$/;{rb}}}
    {get;~result}
}

{//; Usage: [label] [message] [color] }
{function;getShield;
    https://raster.shields.io/badge/{params;0}-{params;1}-{params;2}
}

{//; Usage: <question> [options] [channelids] [users]  }
{function;prompt;
    {set;~channelIds;{func.??;{params;2};{channelid}}}
    {set;~users;{func.??;{params;3};{userid}}}
    {set;~embed;
        author.icon_url:{useravatar;{get;~users}};
        author.name:{username;{get;~users}}#{userdiscrim;{get;~users}};
        description:{params;0};
        footer.text:Reply with c or cancel to cancel.
    }
    {if;{func.!?;{params;1}};
        {set;~valid;}
        {push;~valid;{params;1}}
    }
    {void;{set;~messageId;{send;{channelid};{apply;embedbuild;{get;~embed}}}}}
    {set;~response;{waitmessage;{channelid};{userid};
        {if;{func.!?;{params;1}};
            {bool;
                {concat;["c", "cancel"];{params;1}};
                contains;
                {lower;{messagetext}}
            }
        }
    }}
    {if;{regextest;{get;~response};/^`Wait timed out after \d+`$/}
        {set;~type;{if;{func.?;{params;1}};send;edit}}
        {func.errorEmbed;
            You took too long.;
            {get;~messageId};
            {get;~channelIds}
            {get;~type}
        }
        {return}
    }
    {get;~response;3}
}

{//; Usage: <question> <options> <responses> [channelIds] [users] }
{function;promptReaction;
    {set;~channelIds;{func.??;{params;2};{channelid}}}
    {set;~users;{func.??;{params;3};{userid}}}
    {if;{length;{params;1}};!=;{length;{params;2}};
        {throw;options and responses must have the same length}
        {return;false}
    }
    {set;~embed;
        author.icon_url:{useravatar;{get;~users}};
        author.name:{username;{get;~users}}#{userdiscrim;{get;~users}};
        description:{params;0};
        footer.text:React with :x: to cancel.
    }
    {set;~valid;[":x:"]}
    {push;~valid;{params;1}}
    {void;{set;~message;{send;{get;~channelIds};{apply;embedbuild;{get;~embed}}}}}
    {set;~reaction;{waitreact;{get;~message};{userid};{get;~valid}}}
    {switch;{get;~reaction;3};
        :x:;
            {func.errorEmbed;
                Command was cancelled.;
                {get;~reaction;1};
                {get;~reaction;0};
                {get;~reaction;2};
                edit
            }
            {return};
        {params;1};
            {jget;{params;2};{indexof;{params;1};{get;~reaction;3}}}
    }
}

{//; Usage: <message> <messageId> [channelId] [userid] [type] }
{function;errorEmbed;
    {set;~channelid;{func.??;{params;2};{channelid}}}
    {set;~user;{func.??;{params;3};{userid}}}
    {set;~type;{func.??;{params;4};send}}
    {set;~embed;
        author.icon_url:{useravatar;{get;~user}};
        author.name:{username;{get;~user}}#{userdiscrim;{get;~user}};
        description:{params;0};
        footer.text::x: Error;
        color:red
    }
    {apply;{get;~type};{get;~channelid};{params;1};{apply;embedbuild;{get;~embed}}}
}

{//; Usage: [item]
 //  Checks if item is null
 // }
{function;?;
    {if;{isarray;{params;0}};
        {bool;{length;{params;0}};==;0};
        {logic;||;
            {bool;{params;0};==;`Not enough arguments`};
            {bool;{params};==;{null}}
        }
    }
}

{//; Usage: [item]
 //  Checks if item is not null
 // }
{function;!?;
    {logic;!;{func.?;{params;0}}}
}

{//; Usage: [item] [default] }
{function;??;
    {if;{func.?;{params;0}};
        {params;1};
        {params;0}
    }
}

{//; Usage: <title> <message> }
{function;debug;
    {set;~embed.debug;
        title:{params;0};
        description:{params;1};
        color:red;
        timestamp:{time}
    }
    {void;{send;{channelid};{apply;embedbuild;{get;~embed.debug}}}}
}